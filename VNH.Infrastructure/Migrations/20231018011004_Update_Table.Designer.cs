// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VNH.Infrastructure.Presenters.Migrations;

#nullable disable

namespace VNH.Infrastructure.Migrations
{
    [DbContext(typeof(VietNamHistoryContext))]
    [Migration("20231018011004_Update_Table")]
    partial class Update_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d1f771da-b318-42f8-a003-5a15614216f5"),
                            RoleId = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("VNH.Domain.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Confirm")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MostConfirm")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PubDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("VNH.Domain.AnswerVote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("AnswerVote");
                });

            modelBuilder.Entity("VNH.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("VNH.Domain.CourseComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseComment");
                });

            modelBuilder.Entity("VNH.Domain.CourseRating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseRating");
                });

            modelBuilder.Entity("VNH.Domain.CourseSave", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseSave");
                });

            modelBuilder.Entity("VNH.Domain.CourseSubComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PreCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PreCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseSubComment");
                });

            modelBuilder.Entity("VNH.Domain.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("VNH.Domain.DocumentSave", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentSave");
                });

            modelBuilder.Entity("VNH.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("VNH.Domain.Entities.NotificationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsRead")
                        .HasColumnType("int");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationDetails");
                });

            modelBuilder.Entity("VNH.Domain.Entities.PostTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("VNH.Domain.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("VNH.Domain.ExerciseDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("TestMark")
                        .HasColumnType("float");

                    b.Property<DateTime?>("TestTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserId");

                    b.ToTable("ExerciseDetail");
                });

            modelBuilder.Entity("VNH.Domain.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UrlVideo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("VNH.Domain.News", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PubDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("VNH.Domain.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("VNH.Domain.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PostId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("VNH.Domain.PostLike", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLike");
                });

            modelBuilder.Entity("VNH.Domain.PostReportDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReportDetail");
                });

            modelBuilder.Entity("VNH.Domain.PostSave", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostSave");
                });

            modelBuilder.Entity("VNH.Domain.PostSubComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("PreCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PreCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("PostSubComment");
                });

            modelBuilder.Entity("VNH.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PubDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("QuestionTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ViewNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("VNH.Domain.QuestionLike", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLike");
                });

            modelBuilder.Entity("VNH.Domain.QuestionReportDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionReportDetail");
                });

            modelBuilder.Entity("VNH.Domain.QuestionSave", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionSave");
                });

            modelBuilder.Entity("VNH.Domain.QuestionTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionTag");
                });

            modelBuilder.Entity("VNH.Domain.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Answer2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Answer3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Answer4")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightAnswer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("VNH.Domain.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("VNH.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575"),
                            ConcurrencyStamp = "1d53ca53-b255-46f8-bee4-8803e002d041",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("cfafcfcd-d796-43f4-8ac0-ead43bd2f18a"),
                            ConcurrencyStamp = "e7f9447e-af73-4931-ad2a-c02097c69199",
                            Name = "teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("5d4e4081-91f8-4fc0-b8eb-9860b7849604"),
                            ConcurrencyStamp = "48cd770f-4424-4b8d-b094-f87aae615ae4",
                            Name = "student",
                            NormalizedName = "student"
                        });
                });

            modelBuilder.Entity("VNH.Domain.Search", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Search");
                });

            modelBuilder.Entity("VNH.Domain.SubAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PreAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PubDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PreAnswerId");

                    b.ToTable("SubAnswer");
                });

            modelBuilder.Entity("VNH.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("VNH.Domain.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("VNH.Domain.TopicDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicDetail");
                });

            modelBuilder.Entity("VNH.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .HasMaxLength(3145728)
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberConfirm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1f771da-b318-42f8-a003-5a15614216f5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "785e7713-02d8-4a8e-ab42-3ba3b85f7072",
                            DateOfBirth = new DateTime(2002, 3, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Lương Xuân Nhất",
                            Gender = 0,
                            LockoutEnabled = false,
                            NormalizedEmail = "onionwebdev@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEG9oYjXw81bD5sOZ/MT31CfbBnzP9hPNDInixsTbchKEJ+tdUB9EOaWSpq4txVVQUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("VNH.Domain.Answer", b =>
                {
                    b.HasOne("VNH.Domain.User", "Author")
                        .WithMany("Answers")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Answer__AuthorId__1AD3FDA4");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("VNH.Domain.AnswerVote", b =>
                {
                    b.HasOne("VNH.Domain.Answer", "Answer")
                        .WithMany("AnswerVotes")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK__AnswerVot__Answe__1DB06A4F");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("AnswerVotes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__AnswerVot__UserI__1EA48E88");

                    b.Navigation("Answer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.Course", b =>
                {
                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Course__UserId__787EE5A0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.CourseComment", b =>
                {
                    b.HasOne("VNH.Domain.Course", "Course")
                        .WithMany("CourseComments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__CourseCom__Cours__7A672E12");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("CourseComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__CourseCom__UserI__797309D9");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.CourseRating", b =>
                {
                    b.HasOne("VNH.Domain.Course", "Course")
                        .WithMany("CourseRatings")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__CourseRat__Cours__7D439ABD");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("CourseRatings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__CourseRat__UserI__7E37BEF6");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.CourseSave", b =>
                {
                    b.HasOne("VNH.Domain.Course", "Course")
                        .WithMany("CourseSaves")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__CourseSav__Cours__04E4BC85");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("CourseSaves")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__CourseSav__UserI__03F0984C");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.CourseSubComment", b =>
                {
                    b.HasOne("VNH.Domain.CourseComment", "PreComment")
                        .WithMany("CourseSubComments")
                        .HasForeignKey("PreCommentId")
                        .HasConstraintName("FK__CourseSub__PreCo__7C4F7684");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("CourseSubComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__CourseSub__UserI__7B5B524B");

                    b.Navigation("PreComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.Document", b =>
                {
                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Document__UserId__0A9D95DB");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.DocumentSave", b =>
                {
                    b.HasOne("VNH.Domain.Document", "Document")
                        .WithMany("DocumentSaves")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK__DocumentS__Docum__0C85DE4D");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("DocumentSaves")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__DocumentS__UserI__0B91BA14");

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.Entities.NotificationDetail", b =>
                {
                    b.HasOne("VNH.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationDetails")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__NotificationDetail__NotificationId__1EQ48E88");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("NotificationDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__NotificationDetail__UserId__1EA48E88");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.Entities.PostTag", b =>
                {
                    b.HasOne("VNH.Domain.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VNH.Domain.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("VNH.Domain.Exercise", b =>
                {
                    b.HasOne("VNH.Domain.Lesson", "IdNavigation")
                        .WithOne("Exercise")
                        .HasForeignKey("VNH.Domain.Exercise", "Id")
                        .IsRequired()
                        .HasConstraintName("FK__Exercise__Id__282DF8C2");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("VNH.Domain.ExerciseDetail", b =>
                {
                    b.HasOne("VNH.Domain.Exercise", "Exercise")
                        .WithMany("ExerciseDetails")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("FK__ExerciseD__Exerc__02084FDA");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("ExerciseDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ExerciseD__UserI__01142BA1");

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.Lesson", b =>
                {
                    b.HasOne("VNH.Domain.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Lesson__CourseId__7F2BE32F");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("VNH.Domain.Post", b =>
                {
                    b.HasOne("VNH.Domain.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Post__TopicId__76969D2E");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Post__UserId__778AC167");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.PostComment", b =>
                {
                    b.HasOne("VNH.Domain.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__PostComme__PostI__0F624AF8");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("PostComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PostComme__UserI__10566F31");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.PostLike", b =>
                {
                    b.HasOne("VNH.Domain.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__PostLike__PostId__1332DBDC");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PostLike__UserId__14270015");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.PostReportDetail", b =>
                {
                    b.HasOne("VNH.Domain.Post", "Post")
                        .WithMany("PostReportDetails")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__PostRepor__PostI__17036CC0");

                    b.HasOne("VNH.Domain.Report", "Report")
                        .WithMany("PostReportDetails")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK__PostRepor__Repor__151B244E");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("PostReportDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PostRepor__UserI__160F4887");

                    b.Navigation("Post");

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.PostSave", b =>
                {
                    b.HasOne("VNH.Domain.Post", "Post")
                        .WithMany("PostSaves")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__PostSave__PostId__08B54D69");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("PostSaves")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PostSave__UserId__09A971A2");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.PostSubComment", b =>
                {
                    b.HasOne("VNH.Domain.PostComment", "PreComment")
                        .WithMany("PostSubComments")
                        .HasForeignKey("PreCommentId")
                        .HasConstraintName("FK__PostSubCo__PreCo__114A936A");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("PostSubComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PostSubCo__UserI__123EB7A3");

                    b.Navigation("PreComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.Question", b =>
                {
                    b.HasOne("VNH.Domain.User", "Author")
                        .WithMany("Questions")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Question__Author__18EBB532");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("VNH.Domain.QuestionLike", b =>
                {
                    b.HasOne("VNH.Domain.Question", "Question")
                        .WithMany("QuestionLikes")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__QuestionL__Quest__1F98B2C1");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("QuestionLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__QuestionL__UserI__208CD6FA");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.QuestionReportDetail", b =>
                {
                    b.HasOne("VNH.Domain.Question", "Question")
                        .WithMany("QuestionReportDetails")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__QuestionR__Quest__2180FB33");

                    b.HasOne("VNH.Domain.Report", "Report")
                        .WithMany("QuestionReportDetails")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK__QuestionR__Quest__22751F6C");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("QuestionReportDetails")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__QuestionR__UserI__236943A5");

                    b.Navigation("Question");

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.QuestionSave", b =>
                {
                    b.HasOne("VNH.Domain.Question", "Question")
                        .WithMany("QuestionSaves")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__QuestionS__Quest__25518C17");

                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("QuestionSaves")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__QuestionS__UserI__245D67DE");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.QuestionTag", b =>
                {
                    b.HasOne("VNH.Domain.Question", "IdNavigation")
                        .WithOne("QuestionTag")
                        .HasForeignKey("VNH.Domain.QuestionTag", "Id")
                        .IsRequired()
                        .HasConstraintName("FK__QuestionTag__Id__2739D489");

                    b.HasOne("VNH.Domain.Tag", "Tag")
                        .WithMany("QuestionTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK__QuestionT__TagId__2645B050");

                    b.Navigation("IdNavigation");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("VNH.Domain.Quiz", b =>
                {
                    b.HasOne("VNH.Domain.Exercise", "IdNavigation")
                        .WithOne("Quiz")
                        .HasForeignKey("VNH.Domain.Quiz", "Id")
                        .IsRequired()
                        .HasConstraintName("FK__Quiz__Id__29221CFB");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("VNH.Domain.Search", b =>
                {
                    b.HasOne("VNH.Domain.User", "User")
                        .WithMany("Searches")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Search__UserId__17F790F9");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VNH.Domain.SubAnswer", b =>
                {
                    b.HasOne("VNH.Domain.User", "Author")
                        .WithMany("SubAnswers")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__SubAnswer__Autho__1CBC4616");

                    b.HasOne("VNH.Domain.Answer", "PreAnswer")
                        .WithMany("SubAnswers")
                        .HasForeignKey("PreAnswerId")
                        .HasConstraintName("FK__SubAnswer__PreAn__1BC821DD");

                    b.Navigation("Author");

                    b.Navigation("PreAnswer");
                });

            modelBuilder.Entity("VNH.Domain.Topic", b =>
                {
                    b.HasOne("VNH.Domain.User", "Author")
                        .WithMany("Topics")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Topic__AuthorId__05D8E0BE");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("VNH.Domain.TopicDetail", b =>
                {
                    b.HasOne("VNH.Domain.Post", "Post")
                        .WithMany("TopicDetails")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__TopicDeta__TagId__07C12930");

                    b.HasOne("VNH.Domain.Topic", "Topic")
                        .WithMany("TopicDetails")
                        .HasForeignKey("TopicId")
                        .HasConstraintName("FK__TopicDeta__Topic__06CD04F7");

                    b.Navigation("Post");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("VNH.Domain.Answer", b =>
                {
                    b.Navigation("AnswerVotes");

                    b.Navigation("SubAnswers");
                });

            modelBuilder.Entity("VNH.Domain.Course", b =>
                {
                    b.Navigation("CourseComments");

                    b.Navigation("CourseRatings");

                    b.Navigation("CourseSaves");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("VNH.Domain.CourseComment", b =>
                {
                    b.Navigation("CourseSubComments");
                });

            modelBuilder.Entity("VNH.Domain.Document", b =>
                {
                    b.Navigation("DocumentSaves");
                });

            modelBuilder.Entity("VNH.Domain.Entities.Notification", b =>
                {
                    b.Navigation("NotificationDetails");
                });

            modelBuilder.Entity("VNH.Domain.Exercise", b =>
                {
                    b.Navigation("ExerciseDetails");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("VNH.Domain.Lesson", b =>
                {
                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("VNH.Domain.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");

                    b.Navigation("PostReportDetails");

                    b.Navigation("PostSaves");

                    b.Navigation("PostTags");

                    b.Navigation("TopicDetails");
                });

            modelBuilder.Entity("VNH.Domain.PostComment", b =>
                {
                    b.Navigation("PostSubComments");
                });

            modelBuilder.Entity("VNH.Domain.Question", b =>
                {
                    b.Navigation("QuestionLikes");

                    b.Navigation("QuestionReportDetails");

                    b.Navigation("QuestionSaves");

                    b.Navigation("QuestionTag");
                });

            modelBuilder.Entity("VNH.Domain.Report", b =>
                {
                    b.Navigation("PostReportDetails");

                    b.Navigation("QuestionReportDetails");
                });

            modelBuilder.Entity("VNH.Domain.Tag", b =>
                {
                    b.Navigation("PostTags");

                    b.Navigation("QuestionTags");
                });

            modelBuilder.Entity("VNH.Domain.Topic", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("TopicDetails");
                });

            modelBuilder.Entity("VNH.Domain.User", b =>
                {
                    b.Navigation("AnswerVotes");

                    b.Navigation("Answers");

                    b.Navigation("CourseComments");

                    b.Navigation("CourseRatings");

                    b.Navigation("CourseSaves");

                    b.Navigation("CourseSubComments");

                    b.Navigation("Courses");

                    b.Navigation("DocumentSaves");

                    b.Navigation("Documents");

                    b.Navigation("ExerciseDetails");

                    b.Navigation("NotificationDetails");

                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");

                    b.Navigation("PostReportDetails");

                    b.Navigation("PostSaves");

                    b.Navigation("PostSubComments");

                    b.Navigation("Posts");

                    b.Navigation("QuestionLikes");

                    b.Navigation("QuestionReportDetails");

                    b.Navigation("QuestionSaves");

                    b.Navigation("Questions");

                    b.Navigation("Searches");

                    b.Navigation("SubAnswers");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
